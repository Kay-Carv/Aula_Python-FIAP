# -*- coding: utf-8 -*-
"""Aula-11DataFrame.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AJRDDdRkKdAEWaWfiYQzEd2cQ6ejDI9A
"""

# Exercício 2 - Função com duas saídas

numeros1 = [10, 20, 30, 40, 50]
numeros2 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

def calcula_media_listas(lista1, lista2):

  media_lista1 = sum(numeros1)/len(numeros1)
  media_lista2 = sum(numeros2)/len(numeros2)

  return media_lista1, media_lista2

print(calcula_media_listas(numeros1, numeros2))

# Exercício 3 - Função com cinco saídas

numeros1 = [10, 20, 30, 40, 50]
numeros2 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

def calcula_media_listas(lista1, lista2):

  soma_lista1 = sum(numeros1)
  soma_lista2 = sum(numeros2)

  media_lista1 = sum(numeros1)/len(numeros1)
  media_lista2 = sum(numeros2)/len(numeros2)

  media_entre_listas = (media_lista1 + media_lista2) / 2

  return soma_lista1, soma_lista2, media_lista1, media_lista2, media_entre_listas

print(calcula_media_listas(numeros1, numeros2))


# Separando cada indice da tupla
soma_lista1, soma_lista2, media_lista1, media_lista2, media_entre_listas = calcula_media_listas(numeros1, numeros2)

print(soma_lista1)
print(soma_lista2)
print(media_lista1)
print(media_lista2)
print(media_entre_listas)

#  4. Função dentro de função

def eleva_quadrado(x):
  quadrado = x**2
  return quadrado

print(eleva_quadrado(13))

# Calcular a hipotenusa

def calcular_hipotenuza(base, altura):

  hipotenusa = eleva_quadrado(base) + eleva_quadrado(altura)
  raiz_hiponesusa = hipotenusa**(1/2)

  return raiz_hiponesusa

print(f"A hipotenuza é = {calcular_hipotenuza(3, 4)}")

#  5. Três função para calcular a hipotenuza

def eleva_quadrado(x):
  quadrado = x**2
  return quadrado

# Calcular a hipotenusa
def calcula_raiz(raiz):
  "Função para calcular a raiz"
  calcula_raiz = raiz**(1/2)
  return calcula_raiz


def calcular_hipotenuza(base, altura):
  hipotenusa = eleva_quadrado(base) + eleva_quadrado(altura)
  raiz_hipotenusa = calcula_raiz(hipotenusa)

  return raiz_hipotenusa

print(f"A hipotenuza é = {calcular_hipotenuza(3, 4)}")

# Usando SQL para trazer o dado para trabalhar com python
# DBeaver

import pandas as pd

dado1 = pd.read_csv('Track_202504300927.csv')
print(dado1)

# Ex.6

for coluna in dado1.columns:
  print(f'Coluna: {coluna}')

for indice, linha in dado1.iterrows():
  print(f"Indice: {indice}, Name: {linha['Name']}")

print(dado1)

  # Para cada indice nesse DataFrame print o nome dessa linha

for indice, linha in dado1.iterrows():
  media = (linha['Milliseconds'] + linha['Bytes']) / 2
  print(media)

# Uso de função def e aplly para dataframe

def milli_seconds(taxa):
  taxa_seconds = taxa * 0.9
  return taxa_seconds

dado1['taxa_milli_seconds'] = dado1['Milliseconds'].apply(milli_seconds)
dado1

df = pd.DataFrame(
    {
        'Nome': ['Ana', 'Melissa', 'Francisco'],
        'email': ['ana@gmail.com', 'melissa@hotmail.com', 'francisco@outlook.com']
    }
)

#  utilizando lambda
#  Estrutura para separar o dominho em uma nova coluna
df['dominio'] = df['email'].apply(lambda x: x.split('@')[1])
df

"Aplique na coluna do dataframe"
"Crie uma estrutura para separar informações da coluna composer que contenham (&)"

# Uso de função def e aplly para dataframe

# Ainda não deu certa

# dado1['filtro_nome'] = dado1['Composer'].apply(lambda x: x.str.split('r')[6])
# dado1

# Usando de maneira direta

dado1['separa_compositor'] = dado1['Composer'].str.split('&')
dado1

# Para ver apenas uma coluna em expecidico
dado1['separa_compositor']

# Tratamento de erros com Try, except
import pandas as pd

dados = {
    'produto': ['Notebook', 'Mouse', 'Teclado', 'Monitor', 'Webcam'],
    'vendas': [1200, 300, 450, 300, None ],
    'lucro': [2500, 100, 500, 1200, 500],
    'ano': ['2022', '2022', '2022', '2020', 'dois mil e vinte e dois']
}

df = pd.DataFrame(dados)

try:
  media = df['lucro'].mean()
  print(media)
except:
  print('A coluna não existe no dataframe')

df

try:
  df['margem'] = df['produto'] / df['vendas']
except ZeroDivisionError:
  print('Erro na divião pois está tentando fazer a divisão por zero')
except Exception as e:   # Se não tiver nenhum priblema de zero, qualquel outro erro que der vai entrar nesse erro e
  print(f"Outro erro ao calcular a margem {e}")
# except:
#   print('Erro desconhecido')
else:
  print("Margem calculada com sucesso")
  df
finally:
  print("Processo finalizado")

for coluna in ['vendas', 'lucro']:
  try:
    media = df[coluna].mean()
    print(media)
  except KeyError:
    print(f"A coluna {coluna} não está presente no dataframe")

def calcula_media(df, coluna):
  try:
    media = df[coluna].mean()
    return f"Média da coluna {coluna} é igual a: {media:.2f}"
  except KeyError:
    return f"A coluna '{coluna}' não existe no DataFrame."

calcula_media(df, 'lucro')

def converter_coluna_para_float(df, coluna):
  try:
    df[coluna] = df[coluna].astype(float)
    return f"Conversão da coluna '{coluna}' foi realizado com sucesso!"
  except KeyError:
    return f"Erro: a coluna '{coluna}' não existe no dataframe"
  except ValueError:
    return f"Erro: a coluna '{coluna}' não possui valores numéricos"

print(converter_coluna_para_float(df, 'lucro'))